generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  passwordHash        String?
  name                String?
  tradingviewUsername String?
  role                Role           @default(USER)
  image               String?
  emailVerified       DateTime?
  createdAt           DateTime       @default(now())
  resetToken          String?
  resetTokenExpiry    DateTime?
  referredBy          String?        // ID of the user who referred this user
  isActive            Boolean        @default(true)
  accounts            Account[]
  affiliate           Affiliate?
  auditLogs           AuditLog[]     @relation("UserAuditLogs")
  events              Event[]
  adminNotifications  Notification[] @relation("AdminNotifications")
  notifications       Notification[]
  payments            Payment[]
  sessions            Session[]
  subscriptions       Subscription[]
  referrer            User?          @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals           User[]         @relation("UserReferrals")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pair {
  id                    String         @id @default(uuid())
  symbol                String
  version               String?
  createdAt             DateTime       @default(now())
  discountOneMonth      Decimal        @default(0)
  discountSixMonths     Decimal        @default(0)
  discountThreeMonths   Decimal        @default(0)
  discountTwelveMonths  Decimal        @default(0)
  priceOneMonth         Decimal
  priceSixMonths        Decimal
  priceThreeMonths      Decimal
  priceTwelveMonths     Decimal
  timeframe             String
  updatedAt             DateTime       @updatedAt
  listOfTrades          Json?
  performance           Json?
  properties            Json?
  riskPerformanceRatios Json?
  tradesAnalysis        Json?
  paymentItems          PaymentItem[]
  subscriptions         Subscription[]
}

model Subscription {
  id           String             @id @default(uuid())
  userId       String
  pairId       String
  period       SubscriptionPeriod
  startDate    DateTime
  expiryDate   DateTime
  status       SubscriptionStatus
  paymentId    String?            @unique
  inviteStatus InviteStatus
  basePrice    Decimal?
  discountRate Decimal?
  commissions  Commission[]
  pair         Pair               @relation(fields: [pairId], references: [id])
  payment      Payment?           @relation(fields: [paymentId], references: [id])
  user         User               @relation(fields: [userId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Payment {
  id           String         @id @default(uuid())
  userId       String
  network      PaymentNetwork
  status       PaymentStatus
  txHash       String?
  invoiceId    String?
  createdAt    DateTime       @default(now())
  actuallyPaid Decimal?
  expiresAt    DateTime?
  orderData    Json?
  orderId      String?
  totalAmount  Decimal
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  paymentItems PaymentItem[]
  subscription Subscription?
}

model PaymentItem {
  id           String             @id @default(uuid())
  paymentId    String
  pairId       String
  basePrice    Decimal
  discountRate Decimal
  finalPrice   Decimal
  period       SubscriptionPeriod
  createdAt    DateTime           @default(now())
  pair         Pair               @relation(fields: [pairId], references: [id])
  payment      Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([paymentId, pairId])
}

model Affiliate {
  id             String       @id @default(uuid())
  userId         String       @unique
  referralCode   String       @unique
  walletAddress  String?
  commissionRate Decimal
  user           User         @relation(fields: [userId], references: [id])
  commissions    Commission[]
}

model Commission {
  id             String           @id @default(uuid())
  affiliateId    String
  subscriptionId String
  amount         Decimal
  status         CommissionStatus
  type           String           @default("REFERRAL")
  payoutId       String?
  paidAt         DateTime?
  createdAt      DateTime         @default(now())
  affiliate      Affiliate        @relation(fields: [affiliateId], references: [id])
  subscription   Subscription     @relation(fields: [subscriptionId], references: [id])
}

model Event {
  id        String   @id @default(uuid())
  userId    String
  eventType String
  timestamp DateTime @default(now())
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  adminId    String
  action     String
  targetId   String?
  targetType String?
  timestamp  DateTime @default(now())
  details    Json?
  admin      User     @relation("UserAuditLogs", fields: [adminId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String?
  adminId   String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  admin     User?            @relation("AdminNotifications", fields: [adminId], references: [id])
  user      User?            @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  SUPPORT
  MANAGER
}

enum SubscriptionPeriod {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  PENDING
  CANCELLED
}

enum InviteStatus {
  PENDING
  SENT
  COMPLETED
}

enum PaymentNetwork {
  USDT
  BTC
  ETH
  USDT_TRC20
  USDT_ERC20
  USDT_BEP20
}

enum PaymentStatus {
  PENDING
  PAID
  UNDERPAID
  EXPIRED
  FAILED
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}

model Stats {
  id            String @id @default(uuid())
  type          StatsType
  period        StatsPeriod?
  metadata      Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum StatsType {
  FILE_METRICS
  USER_METRICS
  AFFILIATE_METRICS
  REVENUE_METRICS
  SUBSCRIPTION_METRICS
  BILLING_METRICS
  COMMISSION_METRICS
  PAYMENT_METRICS
  NOTIFICATION_METRICS
  AUDIT_METRICS
  EVENT_METRICS
  EMAIL_METRICS
}

enum StatsPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  ALL_TIME
}

enum NotificationType {
  SUBSCRIPTION_CONFIRMED
  SUBSCRIPTION_EXPIRED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  ADMIN_ACTION_REQUIRED
  TRADINGVIEW_INVITE_SENT
  TRADINGVIEW_INVITE_COMPLETED
  RENEWAL_REMINDER
  GENERAL
}

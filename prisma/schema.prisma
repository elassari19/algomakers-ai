// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @default(uuid())
  email                  String      @unique
  passwordHash           String?
  name                   String?
  tradingviewUsername    String?
  role                   Role        @default(USER)
  image                  String?
  emailVerified          DateTime?
  resetToken             String?
  resetTokenExpiry       DateTime?
  createdAt              DateTime    @default(now())
  subscriptions          Subscription[]
  payments               Payment[]
  affiliate              Affiliate?
  events                 Event[]
  auditLogs              AuditLog[]  @relation("UserAuditLogs")
  sessions               Session[]
  notifications         Notification[]
  adminNotifications    Notification[] @relation("AdminNotifications")
  accounts              Account[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pair {
  id                    String         @id @default(uuid())
  symbol                String
  metrics               Json
  priceOneMonth         Decimal        // Price for one month
  priceThreeMonths      Decimal        // Price for three months
  priceSixMonths        Decimal        // Price for six months
  priceTwelveMonths     Decimal        // Price for twelve months
  discountThreeMonths   Decimal        @default(0) // Discount for three months
  discountOneMonth      Decimal        @default(0) // Discount for one month
  discountSixMonths     Decimal        @default(0) // Discount for six months
  discountTwelveMonths  Decimal        @default(0) // Discount for twelve months
  timeframe             String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  subscriptions         Subscription[]
  paymentItems          PaymentItem[]
}

model Subscription {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  pair         Pair        @relation(fields: [pairId], references: [id])
  pairId       String
  period       SubscriptionPeriod
  startDate    DateTime
  expiryDate   DateTime
  status       SubscriptionStatus
  payment      Payment?    @relation(fields: [paymentId], references: [id])
  paymentId    String?     @unique
  inviteStatus InviteStatus
  commissions  Commission[]
  basePrice    Decimal?    // Store the price paid for this subscription
  discountRate Decimal?    // Store the discount applied
}

model Payment {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  totalAmount  Decimal     // Total amount for all pairs in this payment
  network      PaymentNetwork
  status       PaymentStatus
  txHash       String?
  invoiceId    String?     // NOWPayments invoice/payment ID
  orderId      String?     // Our internal order ID
  actuallyPaid Decimal?    // Actual amount paid (for partial payments)
  expiresAt    DateTime?   // Payment expiration
  orderData    Json?       // Store order metadata
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  paymentItems PaymentItem[]
  subscription Subscription?
}

model PaymentItem {
  id            String      @id @default(uuid())
  payment       Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId     String
  pair          Pair        @relation(fields: [pairId], references: [id])
  pairId        String
  basePrice     Decimal     // Original price of the pair at time of purchase
  discountRate  Decimal     // Discount percentage applied (0-100)
  finalPrice    Decimal     // Final price after discount
  period        SubscriptionPeriod // Subscription period for this pair
  createdAt     DateTime    @default(now())

  @@unique([paymentId, pairId]) // Prevent duplicate pairs in same payment
}

model Affiliate {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String      @unique
  referralCode   String      @unique
  walletAddress  String?
  commissionRate Decimal
  commissions    Commission[]
}

model Commission {
  id             String      @id @default(uuid())
  affiliate      Affiliate   @relation(fields: [affiliateId], references: [id])
  affiliateId    String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  amount         Decimal
  status         CommissionStatus
  payoutId       String?
  createdAt      DateTime    @default(now())
}

model Event {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  eventType String
  timestamp DateTime    @default(now())
  metadata  Json?
}

model AuditLog {
  id         String      @id @default(uuid())
  admin      User        @relation("UserAuditLogs", fields: [adminId], references: [id])
  adminId    String
  action     String
  targetId   String?
  targetType String?
  timestamp  DateTime    @default(now())
  details    Json?
}

model Notification {
  id          String      @id @default(uuid())
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  admin       User?       @relation("AdminNotifications", fields: [adminId], references: [id])
  adminId     String?
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
}

// Enums

enum Role {
  USER
  ADMIN
  SUPPORT
  MANAGER
}

enum SubscriptionPeriod {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  PENDING
  CANCELLED
}

enum InviteStatus {
  PENDING
  SENT
  COMPLETED
}

enum PaymentNetwork {
  USDT_TRC20
  USDT_ERC20
  USDT_BEP20
  USDT
  BTC
  ETH
}

enum PaymentStatus {
  PENDING
  PAID
  UNDERPAID
  EXPIRED
  FAILED
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}

enum NotificationType {
  SUBSCRIPTION_CONFIRMED
  SUBSCRIPTION_EXPIRED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  ADMIN_ACTION_REQUIRED
  TRADINGVIEW_INVITE_SENT
  TRADINGVIEW_INVITE_COMPLETED
  RENEWAL_REMINDER
  GENERAL
}
